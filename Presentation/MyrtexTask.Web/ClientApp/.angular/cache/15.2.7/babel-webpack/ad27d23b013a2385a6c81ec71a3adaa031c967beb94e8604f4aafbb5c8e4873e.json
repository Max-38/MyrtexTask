{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { EmployeeService } from './employee.service';\nimport { Employee } from './Employee';\nlet EmployeesTestComponent = class EmployeesTestComponent {\n  constructor(employeeService) {\n    this.employeeService = employeeService;\n    this.employee = new Employee();\n    this.employees = [];\n    /*gridOptions: any = {};*/\n    this.columnDefs = [{\n      headerName: 'Id',\n      field: \"id\",\n      sortable: \"true\",\n      filter: \"true\",\n      hide: \"true\"\n    }, {\n      headerName: 'Отдел',\n      field: \"department\",\n      sortable: \"true\",\n      filter: \"true\"\n    }, {\n      headerName: 'Полное имя',\n      field: \"fullName\",\n      sortable: \"true\",\n      filter: \"true\"\n    }, {\n      headerName: 'Дата рождения',\n      field: \"dateOfBirth\",\n      sortable: \"true\",\n      filter: \"agDateColumnFilter\"\n    }, {\n      headerName: 'Дата приема на работу',\n      field: \"dateOfEmployment\",\n      sortable: \"true\",\n      filter: \"agDateColumnFilter\"\n    }, {\n      headerName: 'Зарплата',\n      field: \"salary\",\n      sortable: \"true\",\n      filter: \"true\"\n    }];\n    this.rowData = [];\n    this.rowSelection = 'single';\n    /*this.rowData = this.employees;*/\n    //this.gridOptions = <GridOptions>{\n    //  //sortable: true,\n    //  //filter: true\n    //};\n    //this.gridOptions.columnDefs = [\n    //  { headerName: 'Id', field: \"value\",  width: 100 },\n    //  { headerName: 'Отдел', field: \"value\", width: 100 },\n    //  { headerName: 'Полное имя', field: \"value\", width: 100 },\n    //  { headerName: 'Дата рождения', field: \"value\", width: 100 },\n    //  { headerName: 'Дата приема на работу', field: \"value\", width: 100 },\n    //  { headerName: 'Зарплата', field: \"value\", width: 100 }\n    //];\n    //this.gridOptions.rowData = this.employees.map(function (item) {\n    //  return { \"value\": item };\n    //});\n  }\n\n  ngOnInit() {\n    this.loadEmployees();\n    //this.rowData = this.employees;\n  }\n\n  loadEmployees() {\n    this.employeeService.getEmployees().subscribe(data => {\n      this.rowData = data;\n    });\n  }\n  save() {\n    if (this.employee.id == null) {\n      this.employeeService.createEmployee(this.employee).subscribe(data => this.employees.push(data));\n    } else {\n      this.employeeService.updateEmployee(this.employee);\n    }\n    this.cancel();\n  }\n  delete(p) {\n    this.employeeService.deleteEmployee(p.id).subscribe(() => this.employeeService.getEmployees().subscribe(data => {\n      this.employees = data;\n    }));\n    this.cancel();\n  }\n  editEmployee(p) {\n    this.employee = p;\n  }\n  add() {\n    this.cancel();\n  }\n  cancel() {\n    this.employee = new Employee();\n  }\n};\nEmployeesTestComponent = __decorate([Component({\n  selector: 'app-employees',\n  templateUrl: './employees.component.html',\n  providers: [EmployeeService]\n})], EmployeesTestComponent);\nexport { EmployeesTestComponent };","map":{"version":3,"mappings":"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","names":["Component","EmployeeService","Employee","EmployeesTestComponent","constructor","employeeService","headerName","field","sortable","filter","hide","ngOnInit","loadEmployees","getEmployees","subscribe","data","rowData","save","employee","id","createEmployee","employees","push","updateEmployee","cancel","delete","p","deleteEmployee","editEmployee","add","selector","templateUrl","providers"],"sourceRoot":"","sources":["C:\\Users\\Ryadn\\source\\repos\\MyrtexTask\\Presentation\\MyrtexTask.Web\\ClientApp\\src\\app\\employees\\employeesTest.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { EmployeeService } from './employee.service';\r\nimport { Employee } from './Employee';\r\nimport { Observable, Subject } from 'rxjs'; \r\nimport { ColDef, GridOptions } from 'ag-grid';\r\n\r\n@Component({\r\n  selector: 'app-employees',\r\n  templateUrl: './employees.component.html',\r\n  providers: [EmployeeService]\r\n})\r\nexport class EmployeesTestComponent implements OnInit{\r\n\r\n  employee: Employee = new Employee();\r\n  employees: Employee[] = [];\r\n  /*gridOptions: any = {};*/\r\n  columnDefs: any[] = [\r\n    { headerName: 'Id', field: \"id\", sortable: \"true\", filter: \"true\", hide: \"true\" },\r\n    { headerName: 'Отдел', field: \"department\", sortable: \"true\", filter: \"true\" },\r\n    { headerName: 'Полное имя', field: \"fullName\", sortable: \"true\", filter: \"true\" },\r\n    { headerName: 'Дата рождения', field: \"dateOfBirth\", sortable: \"true\", filter: \"agDateColumnFilter\" },\r\n    { headerName: 'Дата приема на работу', field: \"dateOfEmployment\", sortable: \"true\", filter: \"agDateColumnFilter\" },\r\n    { headerName: 'Зарплата', field: \"salary\", sortable: \"true\", filter: \"true\" }\r\n  ];\r\n  rowData: Employee[] = [];\r\n  rowSelection: 'single' | 'multiple' = 'single';\r\n  \r\n\r\n  constructor(private employeeService: EmployeeService) {\r\n    /*this.rowData = this.employees;*/\r\n    //this.gridOptions = <GridOptions>{\r\n    //  //sortable: true,\r\n    //  //filter: true\r\n    //};\r\n    //this.gridOptions.columnDefs = [\r\n    //  { headerName: 'Id', field: \"value\",  width: 100 },\r\n    //  { headerName: 'Отдел', field: \"value\", width: 100 },\r\n    //  { headerName: 'Полное имя', field: \"value\", width: 100 },\r\n    //  { headerName: 'Дата рождения', field: \"value\", width: 100 },\r\n    //  { headerName: 'Дата приема на работу', field: \"value\", width: 100 },\r\n    //  { headerName: 'Зарплата', field: \"value\", width: 100 }\r\n    //];\r\n    //this.gridOptions.rowData = this.employees.map(function (item) {\r\n    //  return { \"value\": item };\r\n    //});\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadEmployees();\r\n    //this.rowData = this.employees;\r\n  }\r\n\r\n  loadEmployees() {\r\n    this.employeeService.getEmployees()\r\n      .subscribe(data => {\r\n        this.rowData = data;\r\n      });\r\n  }\r\n\r\n  save() {\r\n    if (this.employee.id == null) {\r\n      this.employeeService.createEmployee(this.employee)\r\n        .subscribe((data: Employee) => this.employees.push(data));\r\n    } else {\r\n      this.employeeService.updateEmployee(this.employee)\r\n\r\n    }\r\n    this.cancel();\r\n\r\n  }\r\n\r\n  delete(p: Employee) {\r\n    this.employeeService.deleteEmployee(p.id)\r\n      .subscribe(() => this.employeeService.getEmployees()\r\n        .subscribe(data => { this.employees = data}));\r\n\r\n    this.cancel()\r\n  }\r\n\r\n  editEmployee(p: Employee) {\r\n    this.employee = p;\r\n    \r\n  }\r\n\r\n  add() {\r\n    this.cancel();\r\n  }\r\n\r\n  cancel() {\r\n    this.employee = new Employee();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}