{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { EmployeeService } from './employee.service';\nimport { Employee } from './Employee';\nlet EmployeesTestComponent = class EmployeesTestComponent {\n  //columnDefs: ColDef[] = [\n  //  { field: 'Id' },\n  //  { field: 'Отдел' },\n  //  { field: 'Полное имя' },\n  //  { field: 'Дата рождения' },\n  //  { field: 'Дата приема на работу' },\n  //  { field: 'Зарплата' },\n  //];\n  //rowSelection: 'single' | 'multiple' = 'single';\n  //rowData!: Employee[];\n  constructor(employeeService) {\n    this.employeeService = employeeService;\n    this.employee = new Employee();\n    this.employees = [];\n    this.gridOptions = {\n      enableSorting: true,\n      enableFilter: true\n    };\n    this.gridOptions.columnDefs = [{\n      headerName: 'Id',\n      field: \"value\"\n    }, {\n      headerName: 'Отдел',\n      field: \"value\"\n    }, {\n      headerName: 'Полное имя',\n      field: \"value\"\n    }, {\n      headerName: 'Дата рождения',\n      field: \"value\"\n    }, {\n      headerName: 'Дата приема на работу',\n      field: \"value\"\n    }, {\n      headerName: 'Зарплата',\n      field: \"value\"\n    }];\n    this.gridOptions.rowData = this.employees.map(function (item) {\n      return {\n        \"value\": item\n      };\n    });\n  }\n  ngOnInit() {\n    this.loadEmployees();\n  }\n  loadEmployees() {\n    this.employeeService.getEmployees().subscribe(data => {\n      this.employees = data;\n    });\n  }\n  save() {\n    if (this.employee.id == null) {\n      this.employeeService.createEmployee(this.employee).subscribe(data => this.employees.push(data));\n    } else {\n      this.employeeService.updateEmployee(this.employee);\n    }\n    this.cancel();\n  }\n  delete(p) {\n    this.employeeService.deleteEmployee(p.id).subscribe(() => this.employeeService.getEmployees().subscribe(data => {\n      this.employees = data;\n    }));\n    this.cancel();\n  }\n  editEmployee(p) {\n    this.employee = p;\n  }\n  add() {\n    this.cancel();\n  }\n  cancel() {\n    this.employee = new Employee();\n  }\n};\nEmployeesTestComponent = __decorate([Component({\n  selector: 'app-employeesTest',\n  templateUrl: './employees.component.html',\n  providers: [EmployeeService]\n})], EmployeesTestComponent);\nexport { EmployeesTestComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SAASC,QAAQ,QAAQ,YAAY;AAS9B,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAKjC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAC,YAAoBC,eAAgC;IAAhC,oBAAe,GAAfA,eAAe;IAdnC,aAAQ,GAAa,IAAIH,QAAQ,EAAE;IACnC,cAAS,GAAe,EAAE;IAcxB,IAAI,CAACI,WAAW,GAAgB;MAC9BC,aAAa,EAAE,IAAI;MACnBC,YAAY,EAAE;KACf;IACD,IAAI,CAACF,WAAW,CAACG,UAAU,GAAG,CAC5B;MAAEC,UAAU,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAO,CAAE,EACpC;MAAED,UAAU,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO,CAAE,EACvC;MAAED,UAAU,EAAE,YAAY;MAAEC,KAAK,EAAE;IAAO,CAAE,EAC5C;MAAED,UAAU,EAAE,eAAe;MAAEC,KAAK,EAAE;IAAO,CAAE,EAC/C;MAAED,UAAU,EAAE,uBAAuB;MAAEC,KAAK,EAAE;IAAO,CAAE,EACvD;MAAED,UAAU,EAAE,UAAU;MAAEC,KAAK,EAAE;IAAO,CAAE,CAC3C;IACD,IAAI,CAACL,WAAW,CAACM,OAAO,GAAG,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,UAAUC,IAAI;MAC1D,OAAO;QAAE,OAAO,EAAEA;MAAI,CAAE;IAC1B,CAAC,CAAC;EACJ;EAEAC,QAAQ;IACN,IAAI,CAACC,aAAa,EAAE;EACtB;EAEAA,aAAa;IACX,IAAI,CAACZ,eAAe,CAACa,YAAY,EAAE,CAChCC,SAAS,CAACC,IAAI,IAAG;MAChB,IAAI,CAACP,SAAS,GAAGO,IAAI;IACvB,CAAC,CAAC;EACN;EAEAC,IAAI;IACF,IAAI,IAAI,CAACC,QAAQ,CAACC,EAAE,IAAI,IAAI,EAAE;MAC5B,IAAI,CAAClB,eAAe,CAACmB,cAAc,CAAC,IAAI,CAACF,QAAQ,CAAC,CAC/CH,SAAS,CAAEC,IAAc,IAAK,IAAI,CAACP,SAAS,CAACY,IAAI,CAACL,IAAI,CAAC,CAAC;KAC5D,MAAM;MACL,IAAI,CAACf,eAAe,CAACqB,cAAc,CAAC,IAAI,CAACJ,QAAQ,CAAC;;IAGpD,IAAI,CAACK,MAAM,EAAE;EAEf;EAEAC,MAAM,CAACC,CAAW;IAChB,IAAI,CAACxB,eAAe,CAACyB,cAAc,CAACD,CAAC,CAACN,EAAE,CAAC,CACtCJ,SAAS,CAAC,MAAM,IAAI,CAACd,eAAe,CAACa,YAAY,EAAE,CACjDC,SAAS,CAACC,IAAI,IAAG;MAAG,IAAI,CAACP,SAAS,GAAGO,IAAI;IAAA,CAAC,CAAC,CAAC;IAEjD,IAAI,CAACO,MAAM,EAAE;EACf;EAEAI,YAAY,CAACF,CAAW;IACtB,IAAI,CAACP,QAAQ,GAAGO,CAAC;EAEnB;EAEAG,GAAG;IACD,IAAI,CAACL,MAAM,EAAE;EACf;EAEAA,MAAM;IACJ,IAAI,CAACL,QAAQ,GAAG,IAAIpB,QAAQ,EAAE;EAChC;CACD;AA7EYC,sBAAsB,eALlCH,SAAS,CAAC;EACTiC,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAClC,eAAe;CAC5B,CAAC,GACWE,sBAAsB,CA6ElC;SA7EYA,sBAAsB","names":["Component","EmployeeService","Employee","EmployeesTestComponent","constructor","employeeService","gridOptions","enableSorting","enableFilter","columnDefs","headerName","field","rowData","employees","map","item","ngOnInit","loadEmployees","getEmployees","subscribe","data","save","employee","id","createEmployee","push","updateEmployee","cancel","delete","p","deleteEmployee","editEmployee","add","selector","templateUrl","providers"],"sourceRoot":"","sources":["C:\\Users\\Ryadn\\source\\repos\\MyrtexTask\\Presentation\\MyrtexTask.Web\\ClientApp\\src\\app\\employees\\employeesTest.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { EmployeeService } from './employee.service';\r\nimport { Employee } from './Employee';\r\nimport { Subject } from 'rxjs'; \r\nimport { ColDef, GridOptions } from 'ag-grid';\r\n\r\n@Component({\r\n  selector: 'app-employeesTest',\r\n  templateUrl: './employees.component.html',\r\n  providers: [EmployeeService]\r\n})\r\nexport class EmployeesTestComponent implements OnInit{\r\n\r\n  employee: Employee = new Employee();\r\n  employees: Employee[] = [];\r\n  gridOptions: GridOptions;\r\n  //columnDefs: ColDef[] = [\r\n  //  { field: 'Id' },\r\n  //  { field: 'Отдел' },\r\n  //  { field: 'Полное имя' },\r\n  //  { field: 'Дата рождения' },\r\n  //  { field: 'Дата приема на работу' },\r\n  //  { field: 'Зарплата' },\r\n  //];\r\n  //rowSelection: 'single' | 'multiple' = 'single';\r\n  //rowData!: Employee[];\r\n\r\n  constructor(private employeeService: EmployeeService) {\r\n    this.gridOptions = <GridOptions>{\r\n      enableSorting: true,\r\n      enableFilter: true\r\n    };\r\n    this.gridOptions.columnDefs = [\r\n      { headerName: 'Id', field: \"value\" },\r\n      { headerName: 'Отдел', field: \"value\" },\r\n      { headerName: 'Полное имя', field: \"value\" },\r\n      { headerName: 'Дата рождения', field: \"value\" },\r\n      { headerName: 'Дата приема на работу', field: \"value\" },\r\n      { headerName: 'Зарплата', field: \"value\" }\r\n    ];\r\n    this.gridOptions.rowData = this.employees.map(function (item) {\r\n      return { \"value\": item };\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadEmployees();\r\n  }\r\n\r\n  loadEmployees() {\r\n    this.employeeService.getEmployees()\r\n      .subscribe(data => {\r\n        this.employees = data;\r\n      });\r\n  }\r\n\r\n  save() {\r\n    if (this.employee.id == null) {\r\n      this.employeeService.createEmployee(this.employee)\r\n        .subscribe((data: Employee) => this.employees.push(data));\r\n    } else {\r\n      this.employeeService.updateEmployee(this.employee)\r\n\r\n    }\r\n    this.cancel();\r\n\r\n  }\r\n\r\n  delete(p: Employee) {\r\n    this.employeeService.deleteEmployee(p.id)\r\n      .subscribe(() => this.employeeService.getEmployees()\r\n        .subscribe(data => { this.employees = data}));\r\n\r\n    this.cancel()\r\n  }\r\n\r\n  editEmployee(p: Employee) {\r\n    this.employee = p;\r\n    \r\n  }\r\n\r\n  add() {\r\n    this.cancel();\r\n  }\r\n\r\n  cancel() {\r\n    this.employee = new Employee();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}